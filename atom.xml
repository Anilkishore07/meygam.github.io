<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Story of Experiments with Technology]]></title>
  <link href="http://blog.meygam.com//atom.xml" rel="self"/>
  <link href="http://blog.meygam.com//"/>
  <updated>2014-11-15T17:26:46-06:00</updated>
  <id>http://blog.meygam.com//</id>
  <author>
    <name><![CDATA[Meygam Inc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Provisioning an Apache Server With Dockers and Vagrant]]></title>
    <link href="http://blog.meygam.com//blog/2014/09/11/provisioning-an-apache-server-with-dockers-and-vagrant/"/>
    <updated>2014-09-11T00:00:00-05:00</updated>
    <id>http://blog.meygam.com//blog/2014/09/11/provisioning-an-apache-server-with-dockers-and-vagrant</id>
    <content type="html"><![CDATA[<p>At the end of this blog we will provision a server with vagrant and run apache in a docker container.</p>

<p>To understand dockers, visit <a href="https://docs.docker.com/">https://docs.docker.com/</a></p>

<p>You can download the docker file &amp; vagrant file used in this blog from <a href="https://github.com/meygam/docker-apache-ubuntu.git">https://github.com/meygam/docker-apache-ubuntu.git</a></p>

<h3>Docker File</h3>

<p>To run a docker container, we need an docker image. You could either pull a publicly available images from <a href="https://registry.hub.docker.com/">https://registry.hub.docker.com/</a> or build your own. In our case we will build our own docker image from a ubuntu base image.</p>

<p>Docker file to have apache installed in it looks like below. Will take a look what each line does.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="lineno">1</span> <span class="no">FROM</span>    <span class="ss">ubuntu</span><span class="p">:</span><span class="mi">14</span><span class="o">.</span><span class="mo">04</span>
<span class="lineno">2</span>   <span class="no">MAINTAINER</span> <span class="no">Saravana</span> <span class="no">Kumar</span> <span class="no">Periyasamy</span> <span class="o">&lt;</span><span class="n">saravanakumar</span><span class="o">.</span><span class="n">periyasamy</span><span class="vi">@gmail</span><span class="o">.</span><span class="n">com</span><span class="o">&gt;</span>
<span class="lineno">3</span> 
<span class="lineno">4</span>   <span class="no">RUN</span>     <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
<span class="lineno">5</span>   <span class="no">RUN</span>     <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="o">-</span><span class="n">y</span> <span class="n">apache2</span>
<span class="lineno">6</span>   <span class="no">CMD</span>     <span class="n">service</span> <span class="n">apache2</span> <span class="n">start</span> <span class="o">&amp;&amp;</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span>   <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">error</span><span class="o">.</span><span class="n">log</span></code></pre></div>


<p>Line#1: takes the base image ubuntu, tag 14.04.
Line#2: is the maintainers meta data for this new docker image.
Line#&frac34;: Runs apt-get update and installs apache2.
Line#5: Starts Apache and tails the apache logs. This will be the default command that will run when a new container is created from this docker image. Tailing the log helps to have a foreground process, and it is required if this container has to be run in background.</p>

<h3>Vagrant File</h3>

<p>To build docker image from this file we need a computer with docker installed. To make life easier, we will use Vagrant to build and run this container. If you are new to vagrant, go to this link get started - <a href="http://docs.vagrantup.com/v2/getting-started/index.html">http://docs.vagrantup.com/v2/getting-started/index.html</a></p>

<p>Here is the vagrant file to build an image from docker file, run the docker and forward the port 80 from vm to host on port 18080.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="lineno"> 1</span> <span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span>  <span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
<span class="lineno"> 4</span>      <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/precise64&quot;</span>
<span class="lineno"> 5</span> 
<span class="lineno"> 6</span>      <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">18080</span>
<span class="lineno"> 7</span> 
<span class="lineno"> 8</span>      <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;docker&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">d</span><span class="o">|</span>
<span class="lineno"> 9</span>       <span class="n">d</span><span class="o">.</span><span class="n">build_image</span> <span class="s2">&quot;/vagrant&quot;</span><span class="p">,</span> <span class="ss">args</span><span class="p">:</span> <span class="s2">&quot;-t speriyasamy/apache2&quot;</span>
<span class="lineno">10</span>       <span class="n">d</span><span class="o">.</span><span class="n">run</span> <span class="s2">&quot;apache2&quot;</span><span class="p">,</span> <span class="ss">image</span><span class="p">:</span> <span class="s2">&quot;speriyasamy/apache2&quot;</span><span class="p">,</span> <span class="ss">args</span><span class="p">:</span> <span class="s2">&quot;-p 80:80&quot;</span>
<span class="lineno">11</span>      <span class="k">end</span>
<span class="lineno">12</span>  <span class="k">end</span></code></pre></div>


<p>Use <code>vagarnt up</code> to bring the vm up. It should install docker, build the docker image and use the same image to run the container.</p>

<p>You can verify this by ssh into the vagrant box, <code>vagarnt ssh</code>, and list the docker container using <code>docker ps</code> and you should see a apache container running.</p>

<p><img src="http://blog.meygam.com//assets/2014/sep/docker.png" alt="Docker Screenshot" /></p>

<p>Now you can access the apache from your host machine using <a href="http://localhost:18080">http://localhost:18080</a></p>

<p><img src="http://blog.meygam.com//assets/2014/sep/apache.png" alt="Apache Screenshot" /></p>

<h3>Manual Steps</h3>

<p>If you prefer not to use Vagrant, install the docker on your host machine and run the below command manually.</p>

<pre><code>docker build &lt;&lt;Dockerfile_Folder&gt;&gt; -t "speriyasamy/apache2"
</code></pre>

<p>And to run a contianer manually from this image, use the below command</p>

<pre><code>docker run -d speriyasamy/apache2
</code></pre>

<h3>Commonly used docker commands</h3>

<pre><code>#list images available on your host machine 
docker images

#list all the docker containers including inactive ones
docker ps -a

#pull a docker image from docker hub
docker pull speriyasamy/docker-openfire-centos

#stop container
docker stop &lt;&lt;cotainer id&gt;&gt;

#start container
docker start &lt;&lt;cotainer id&gt;&gt;

#remove container
docker rm &lt;&lt;cotainer id&gt;&gt;

#remove docker images
docker rmi &lt;&lt;cotainer id&gt;&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to Open VPN Server From iOS Device]]></title>
    <link href="http://blog.meygam.com//blog/2014/03/13/connecting-to-open-vpn-server-from-ios-device/"/>
    <updated>2014-03-13T00:00:00-05:00</updated>
    <id>http://blog.meygam.com//blog/2014/03/13/connecting-to-open-vpn-server-from-ios-device</id>
    <content type="html"><![CDATA[<p>To connect iOS device to Open VPN server we need</p>

<ul>
<li>Open VPN app</li>
<li>Open VPN setting file (client.ovpn)</li>
<li>Client Certificate</li>
<li>CA Certificate (if its self signed)</li>
</ul>


<h3>Install Open VPN app</h3>

<p>Install Open VPN client from app store (<a href="https://itunes.apple.com/app/openvpn-connect/id590379981">https://itunes.apple.com/app/openvpn-connect/id590379981</a>)</p>

<p><img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_174551000_iOS.jpg" alt="" /></p>

<h3>Import Open VPN settings</h3>

<p>Get the Open VPN settings file, clinet.ovpn, from your VPN admin. Send that file to your iOS device through email, and open it in Open VPN app on the iOS device.</p>

<p><img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_175334000_iOS.jpg" alt="" /></p>

<p>Click on the green plus sign to import the profile to iOS device.</p>

<p>{<3>}<img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_180407000_iOS.jpg" alt="" /></p>

<p>Once imported it should like below</p>

<p><img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_180416000_iOS.jpg" alt="" /></p>

<h3>Install Client Certificate</h3>

<p>Get the client certificate in .p12 format from your Open VPN admin. Send that also to your iOS device through email, and install it.</p>

<p><img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_180433000_iOS-1.jpg" alt="" /></p>

<pre><code>Note: You need your Client certificate with password protected. iOS doesn't allow to import certificate with blank password.
</code></pre>

<p><img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_180452000_iOS.jpg" alt="" /></p>

<p>You should see a successfully installed message</p>

<p><img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_180504000_iOS.jpg" alt="" /></p>

<p>If it say &ldquo;Not Trusted&rdquo; as shown in my certificate above, then you will have to install the CA certificate. Else, when you try to connect Open VPN you will get the below error</p>

<pre><code>2014-03-13 10:59:29 EVENT: CORE_ERROR PolarSSL: ca certificate is undefined [ERR]
</code></pre>

<h3>Install CA Certificate</h3>

<p>Get the CA certificate from VPN admin. it should be in the form of .pem file. Send that to your iOS device through email, and install it.</p>

<p><img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_180531000_iOS.jpg" alt="" /></p>

<p>Install the root CA certificate.</p>

<p><img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_180534000_iOS.jpg" alt="" /></p>

<p>Once installed you should see that Certificate Authority is &ldquo;Trusted&rdquo;</p>

<p><img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_180547000_iOS.jpg" alt="" /></p>

<h3>Connect to Open VPN server</h3>

<p>Open &ldquo;Open VPN&rdquo; app in your iOS device, select the <code>None Selected</code> list and select your certificate.</p>

<p><img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_180601000_iOS.jpg" alt="" /></p>

<p>Now turn on the VPN button and you should get connected to Open VPN server successfully.</p>

<p><img src="http://blog.meygam.com//assets/images/2014/Mar/20140313_180641000_iOS.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress on AWS]]></title>
    <link href="http://blog.meygam.com//blog/2014/01/17/wordpress-on-aws/"/>
    <updated>2014-01-17T00:00:00-06:00</updated>
    <id>http://blog.meygam.com//blog/2014/01/17/wordpress-on-aws</id>
    <content type="html"><![CDATA[<p>In this blog I am going to cover the step by step instructions to host your own WordPress blog in AWS. Hosting your own blog has some advantages, you can install any plugins/themes you want and publish any content you like. Having said that it’s not for everyone. If you are a basic user better you create account in wordpress.com. I wanted to run my own blog engine, primarily because I am a techie.</p>

<h3>Architecture for WordPress on AWS</h3>

<p>At a minimum WordPress needs a web server, to serve your blog and a database instance, to store your blog contents. You can install both web server and the database instance in just one server. But for high availability and better backup mechanism I choose to keep the web server and database instance separate. Below is the architecture that we are going to follow. I will talk about each components in following sections.</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30109797" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>




<table>
<tr>
    <th>Service</th>
    <th>Unit Rate</th>
    <th>Quantity (Per Year)</th>
    <th width="80px">Cost per Year</th>
</tr>
<tr>
  <td>EC2 – Linux (t1.micro)</td>
  <td>$0.02 per hour</td>
  <td>365 days * 24 hours = 8760 hours</td>
  <td>$175.20</td>
</tr>
<tr>
  <td>EC2 – Data Transfer OUT From Amazon EC2 To Amazon Elastic Load Balancing</td>
  <td>$0.01 per GB</td>
  <td>1 GB per month * 12 month = 12 GB</td>
  <td>$0.12</td>
</tr>
<tr>
  <td>EC2 – Data Transfer IN To Amazon EC2 From Amazon RDS  Using a private IP address    </td>
  <td>$0.00 per GB</td> 
  <td>1 GB per month * 12 month = 12 GB</td>
  <td>$0.00</td>
</tr>
<tr>
  <td>EBS - Standard volumes</td>
  <td>$0.10 per GB-month</td>
  <td>8 GB * 12 month
= 96 GB-month</td>
  <td>$9.60</td>
</tr>
<tr>
  <td>EBS - Standard volumes</td>
  <td>$0.10 per 1 million I/O requests</td>
  <td>1 million request per month * 12 month</td>
  <td>$1.20</td>
</tr>
<tr>
  <td>RDS – MySQL -
Standard Deployment (db.t1.micro)</td>
  <td>$0.025 per hour</td>
  <td>365 days * 24 hours
= 8760 hours</td>
  <td>$219.00</td>
</tr>
<tr>
  <td>RDS – MySQL - Standard Deployment Database Storage</td>
  <td>$0.125 per GB-month</td>
  <td>20 GB * 12 month
= 240 GB-month</td>
  <td>$30.00</td>
</tr>
<tr>
  <td>ELB</td>
  <td>$0.025 per hour</td>
  <td>365 days * 24 hours
= 8760 hours</td>
  <td>$219.00</td>
</tr>
<tr>
  <td>ELB – Data Transfer</td>
  <td>$0.008 per GB of data processed by ELB</td>
  <td>1 GB per month * 12 month = 12 GB</td>
  <td>$0.10
</td>
</tr>
<tr>
<td>Route 53 - Hosted Zones</td>
<td>$0.50 per hosted zone / month for the first 25 hosted zones
$0.10 per hosted zone / month for additional hosted zones</td>
<td>1 hosted zone * 12 month = 12 hosted zone month</td>
<td>$6.00</td>
</tr>
<tr>
<td>Route 53 -
Standard Queries</td>
<td>$0.500 per million queries – first 1 Billion queries / month
$0.250 per million queries – over 1 Billion queries / month</td>
<td>under 1 million queries per month
* 12 month = 12 million quries</td>
<td>$6.00</td>
</tr>
<tr>
<td></td>
<td></td>
<td><strong>Total Cost Per Year (approx.)</strong></td>
<td align="right"><strong>$666.22</strong></td>
</tr>
<tr>
<td><strong> </strong></td>
<td><strong> </strong></td>
<td><strong>Total Cost Per Month <strong>(approx.)</strong></strong></td>
<td><strong>$55.52</strong></td>
</tr>
</table>


<p>My blog do not get lot of visits for now, so I went with less powerful machines and DB, to save cost. I can scale my blog when required, that’s the advantage of AWS. The current architecture allows scaling. I will cover more about scaling in next part.</p>

<h3>Setup infrastructure in AWS</h3>

<ul>
<li>Create a VPC with the CIDR 10.0.0.0/16.
<img src="http://farm4.staticflickr.com/3831/11989981795_b8780b74a8_b_d.jpg" alt="" /></li>
<li>Create a private subnets under the new VPC. We need two subnets in different availability zones to setup RDS in a VPC.
<img src="http://farm6.staticflickr.com/5547/12023870814_0df096e40a_b_d.jpg" alt="" /></li>
<li>Create an internet gateway and attach it to the VPC.
<img src="http://farm4.staticflickr.com/3732/12023835684_beebf39e90_b_d.jpg" alt="" /></li>
<li>Add internet gateway to the route table and attach it to the subnet.
<img src="http://farm8.staticflickr.com/7452/12023771363_854f9efc68_b_d.jpg" alt="" /></li>
<li>Create a DB Subnet group with minimum two subnets each in different availability zones.
<img src="http://farm6.staticflickr.com/5472/12023771423_9b337e66b5_b_d.jpg" alt="" /></li>
<li>Create an MySQL RDS instance inside the VPC, so that only the instances in the same network can connect to it.
<img src="http://farm6.staticflickr.com/5535/12023836124_690f1f14d6_b_d.jpg" alt="" /></li>
<li>Create an Ubuntu EC2 instance inside the VPC without any public IP, and attach it to the elastic IP, so that I can ssh into the machine.
<img src="http://farm4.staticflickr.com/3720/12024318096_9fdcc9f651_b_d.jpg" alt="" /></li>
</ul>


<h3>Install php5</h3>

<p>Now that EC2 is up and running, ssh into the machine using the private key using the command</p>

<pre><code>ssh -i &lt;&lt;private-key.pem&gt;&gt; ubuntu@&lt;&lt;elastic ip&gt;&gt;
</code></pre>

<p>once you are in the machine, run</p>

<pre><code>sudo apt-get update
</code></pre>

<p>to update the package list. Then install the php5, php5 fpm and php5 mysql packages using the below command</p>

<pre><code>sudo apt-get install php5
sudo apt-get insatll php-fpm
sudo apt-get install php5-mysql
</code></pre>

<h3>Install WordPress</h3>

<p>Download and extract the WordPress using the below commands.</p>

<pre><code>mkdir -p /var/www/blog.meygam.com/htdocs/ /var/www/blog.meygam.com/logs/
cd /var/www/blog.meygam.com/htdocs/
wget http://wordpress.org/latest.tar.gz
tar –strip-components=1 -xvf latest.tar.gz
rm latest.tar.gz
chown -R www-data:www-data /var/www/blog.meygam.com/
</code></pre>

<h3>Install &amp; configure nginx</h3>

<p>By default Ubuntu comes with Apache2. I like to use nginx, as its more modern than Apache2. So first we need to uninstall the Apache2 &amp; all of its dependencies using the below command.</p>

<pre><code>sudo apt-get remove apache2*
</code></pre>

<p>Install nginx using the below command.</p>

<pre><code>sudo apt-get install nginx
</code></pre>

<p>Create the website configuration</p>

<pre><code>vi /etc/nginx/sites-available/blog.meygam.com
</code></pre>

<p>and add the below configuration in the file. Replace blog.meygam.com to your site name.</p>

<pre><code>server {

server_name blog.meygam.com;

access_log /var/log/nginx/blog.meygam.com.access.log;
error_log /var/log/nginx/blog.meygam.com.error.log;

root /var/www/blog.meygam.com/htdocs;
index index.php;

location / {

try_files $uri $uri/ /index.php?$args;

}

location ~ \.php$ {

try_files $uri =404;
include fastcgi_params;
fastcgi_pass unix:/var/run/php5-fpm.sock;

}

}
</code></pre>

<p>Restart the nginx to load the configuration</p>

<pre><code>sudo service nginx restart
</code></pre>

<h3>Configure Load Balancer</h3>

<p>Configure Elastic load balancer (ELB) attach the EC2 instance that we created to it. Using ELB will let you scale the application later point.</p>

<p><img src="http://farm4.staticflickr.com/3685/12024782696_02458889fc_b_d.jpg" alt="" /></p>

<p><img src="http://farm8.staticflickr.com/7349/12024303824_703f47f09a_b_d.jpg" alt="" /></p>

<p><img src="http://farm8.staticflickr.com/7438/12024782816_f152481a0c_b_d.jpg" alt="" /></p>

<p><img src="http://farm4.staticflickr.com/3686/12024236493_d63f2c8e01_b_d.jpg" alt="" /></p>

<h3>Configure Route 53</h3>

<p>Route 53 helps to map your domain name to the elastic load balancer. Create a hosted zone for your domain, and add the Route 53 name servers to your domain register.</p>

<p><img src="http://farm4.staticflickr.com/3806/12024318566_f502004ed4_b_d.jpg" alt="" /></p>

<p>Add a CNAME record to point to your ELB.
<img src="http://farm3.staticflickr.com/2823/12023772813_a2a59d99fa_b_d.jpg" alt="" /></p>

<h3>Configure WordPress</h3>

<p>Now access your website in the browser, and you should see the WordPress configuration page. Follow the instructions and point it to the database that we created.</p>

<p><img src="http://farm6.staticflickr.com/5511/12024553674_1d1230de93_b_d.jpg" alt="" /></p>

<p><img src="http://farm8.staticflickr.com/7415/12024196015_b966e2ee75_b_d.jpg" alt="" /></p>

<p><img src="http://farm4.staticflickr.com/3769/12024553914_8e8b023647_b_d.jpg" alt="" /></p>

<p><img src="http://farm6.staticflickr.com/5540/12025035976_f9738840b3_b_d.jpg" alt="" /></p>

<p><img src="http://farm6.staticflickr.com/5534/12024554344_e2b70a17af_b_d.jpg" alt="" /></p>

<p>And that’s it, your blog is fully up &amp; running on AWS now! Happy Blogging!</p>
]]></content>
  </entry>
  
</feed>
