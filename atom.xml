<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Story of Experiments with Technology]]></title>
  <link href="http://blog.meygam.com//atom.xml" rel="self"/>
  <link href="http://blog.meygam.com//"/>
  <updated>2014-11-15T14:51:14-06:00</updated>
  <id>http://blog.meygam.com//</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Welcome to Jekyll!]]></title>
    <link href="http://blog.meygam.com//blog/2014/11/15/welcome-to-jekyll/"/>
    <updated>2014-11-15T07:18:13-06:00</updated>
    <id>http://blog.meygam.com//blog/2014/11/15/welcome-to-jekyll</id>
    <content type="html"><![CDATA[<p>You’ll find this post in your <code>_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code>jekyll serve --watch</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code>_posts</code> directory that follows the convention <code>YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">&quot;Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">&#39;Tom&#39;</span><span class="p">)</span>
<span class="c1">#=&gt; prints &#39;Hi, Tom&#39; to STDOUT.</span></code></pre></div>


<p>Check out the <a href="http://jekyllrb.com">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://github.com/jekyll/jekyll-help">Jekyll’s dedicated Help repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Provisioning an Apache Server With Dockers and Vagrant]]></title>
    <link href="http://blog.meygam.com//blog/2014/09/11/provisioning-an-apache-server-with-dockers-and-vagrant/"/>
    <updated>2014-09-11T00:00:00-05:00</updated>
    <id>http://blog.meygam.com//blog/2014/09/11/provisioning-an-apache-server-with-dockers-and-vagrant</id>
    <content type="html"><![CDATA[<p>At the end of this blog we will provision a server with vagrant and run apache in a docker container.</p>

<p>To understand dockers, visit <a href="https://docs.docker.com/">https://docs.docker.com/</a></p>

<p>You can download the docker file &amp; vagrant file used in this blog from <a href="https://github.com/meygam/docker-apache-ubuntu.git">https://github.com/meygam/docker-apache-ubuntu.git</a></p>

<h3>Docker File</h3>

<p>To run a docker container, we need an docker image. You could either pull a publicly available images from <a href="https://registry.hub.docker.com/">https://registry.hub.docker.com/</a> or build your own. In our case we will build our own docker image from a ubuntu base image.</p>

<p>Docker file to have apache installed in it looks like below. Will take a look what each line does.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="lineno">1</span> <span class="no">FROM</span>    <span class="ss">ubuntu</span><span class="p">:</span><span class="mi">14</span><span class="o">.</span><span class="mo">04</span>
<span class="lineno">2</span>   <span class="no">MAINTAINER</span> <span class="no">Saravana</span> <span class="no">Kumar</span> <span class="no">Periyasamy</span> <span class="o">&lt;</span><span class="n">saravanakumar</span><span class="o">.</span><span class="n">periyasamy</span><span class="vi">@gmail</span><span class="o">.</span><span class="n">com</span><span class="o">&gt;</span>
<span class="lineno">3</span> 
<span class="lineno">4</span>   <span class="no">RUN</span>     <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
<span class="lineno">5</span>   <span class="no">RUN</span>     <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="o">-</span><span class="n">y</span> <span class="n">apache2</span>
<span class="lineno">6</span>   <span class="no">CMD</span>     <span class="n">service</span> <span class="n">apache2</span> <span class="n">start</span> <span class="o">&amp;&amp;</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span>   <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">error</span><span class="o">.</span><span class="n">log</span></code></pre></div>


<p>Line#1: takes the base image ubuntu, tag 14.04.
Line#2: is the maintainers meta data for this new docker image.
Line#&frac34;: Runs apt-get update and installs apache2.
Line#5: Starts Apache and tails the apache logs. This will be the default command that will run when a new container is created from this docker image. Tailing the log helps to have a foreground process, and it is required if this container has to be run in background.</p>

<h3>Vagrant File</h3>

<p>To build docker image from this file we need a mahcine with docker installed. To make life easier, we will use Vagrant to build and run this container. If you are new to vagrant, go to this link get started - <a href="http://docs.vagrantup.com/v2/getting-started/index.html">http://docs.vagrantup.com/v2/getting-started/index.html</a></p>

<p>Here is the vagrant file to build an image from docker file, run the docker and forward the port 80 from vm to host on port 18080.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="lineno"> 1</span> <span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span>  <span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
<span class="lineno"> 4</span>      <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/precise64&quot;</span>
<span class="lineno"> 5</span> 
<span class="lineno"> 6</span>      <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">18080</span>
<span class="lineno"> 7</span> 
<span class="lineno"> 8</span>      <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;docker&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">d</span><span class="o">|</span>
<span class="lineno"> 9</span>       <span class="n">d</span><span class="o">.</span><span class="n">build_image</span> <span class="s2">&quot;/vagrant&quot;</span><span class="p">,</span> <span class="ss">args</span><span class="p">:</span> <span class="s2">&quot;-t speriyasamy/apache2&quot;</span>
<span class="lineno">10</span>       <span class="n">d</span><span class="o">.</span><span class="n">run</span> <span class="s2">&quot;apache2&quot;</span><span class="p">,</span> <span class="ss">image</span><span class="p">:</span> <span class="s2">&quot;speriyasamy/apache2&quot;</span><span class="p">,</span> <span class="ss">args</span><span class="p">:</span> <span class="s2">&quot;-p 80:80&quot;</span>
<span class="lineno">11</span>      <span class="k">end</span>
<span class="lineno">12</span>  <span class="k">end</span></code></pre></div>


<p>Use <code>vagarnt up</code> to bring the vm up. It should install docker, build the docker image and use the same image to run the container.</p>

<p>You can verify this by ssh into the vagrant box, <code>vagarnt ssh</code>, and list the docker container using <code>docker ps</code> and you should see a apache container running.</p>

<p>{<1>}<img src="http://blog.meygam.com//content/images/2014/Sep/Untitled.png" alt="" /></p>

<p>Now you can access the apache from your host machine using <a href="http://localhost:18080">http://localhost:18080</a></p>

<p>{<2>}<img src="http://blog.meygam.com//content/images/2014/Sep/Untitled-1.png" alt="" /></p>

<h3>Manual Steps</h3>

<p>If you prefer not to use Vagrant, install the docker on your host machine and run the below command manually.</p>

<pre><code>docker build &lt;&lt;Dockerfile_Folder&gt;&gt; -t "speriyasamy/apache2"
</code></pre>

<p>And to run a contianer manually from this image, use the below command</p>

<pre><code>docker run -d speriyasamy/apache2
</code></pre>

<h3>Commonly used docker commands</h3>

<pre><code>#list images available on your host machine 
docker images

#list all the docker containers including inactive ones
docker ps -a

#pull a docker image from docker hub
docker pull speriyasamy/docker-openfire-centos

#stop container
docker stop &lt;&lt;cotainer id&gt;&gt;

#start container
docker start &lt;&lt;cotainer id&gt;&gt;

#remove container
docker rm &lt;&lt;cotainer id&gt;&gt;

#remove docker images
docker rmi &lt;&lt;cotainer id&gt;&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
